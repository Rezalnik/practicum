# -*- coding: utf-8 -*-
"""датасет anime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RH8DlZe4t_ykKzOk1_AE36yZAMcloFSg
"""

!pip install pandas

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np
from scipy import stats as st

"""Задание 3"""

anime = pd.read_csv('anime.csv', sep=',') #импортирование dataset

anime #вывод dataset с помощью таблицы

anime.drop_duplicates() #удаляет повторяющиеся строки
a1 = anime.head() #первые n строк, автоматически n = 5
a2 = anime.tail() #последние n строк, автоматически n = 5
a1

a2

anime.dtypes # тип данных в каждом столбце

anime.describe()#базовая статистика по датафрейму

"""Задание 4"""

#стобца с id в этом датафрейме не существует
anime.rename(columns = {"title": "name of the anime"}, inplace=True)#меняет название 1 столбца, inplace - возвращает ли новый датафрейм
anime

"""задание 5"""

#https://translated.turbopages.org/proxy_u/en-ru.ru.8f3e51fa-63ce0b97-f042e42e-74722d776562/https/www.geeksforgeeks.org/how-to-plot-histogram-from-list-of-data-in-matplotlib/
#a столбчатая диаграмма 

raiting1 = [round(x,1) for x in anime['rating'] if type(x) == float]

plt.hist(raiting1, edgecolor='black', color = "orange")
plt.title('Рейтинги аниме') # название 
plt.savefig('table_1.png')
plt.show()

from matplotlib import colors

# b часть, диаграмма ящик с усами
tab2 = sns.boxplot(x = anime['rating'], color = "purple");
result_tab2 = tab2.get_figure()

result_tab2.savefig('table_2.png')

# круговая диаграмма
#https://www.codecamp.ru/blog/seaborn-pie-chart/

mylist = [x for x in anime['sznOfRelease'] if type(x) == str] #cписок из времён года без путсых значений


season = [mylist.count('Winter'), mylist.count('Spring'), mylist.count('Summer'), mylist.count('Fall')] #количество встречающегося того или иного времени года
labels = ['Winter', 'Spring','Summer', 'Fall'] # времена года

colors = sns.color_palette('pastel')[0:4] #цвета


plt.pie(season, labels = labels, colors = colors, autopct='%.1f%%') # числа, времена года, цвета, погрешность
plt.savefig('table_3.png')
plt.show()

# d тепловая карта
#https://datastart.ru/blog/read/seaborn-heatmaps-13-sposobov-nastroit-vizualizaciyu-matricy-korrelyacii
fig = plt.figure(figsize=(14, 10)) # увеличивает размер диаграммы
tab4 = sns.heatmap(anime.corr(), annot = True, fmt='.1g')#annot - отображает коэффициент корреляции, fmt - сколько по умолчанию знаков после запятой
result_tab4 = tab4.get_figure()

result_tab4.savefig('table_4.png')

# e часть, диаграмму countplot

# как сохранять таблицу
# https://www.geeksforgeeks.org/how-to-save-seaborn-plot-to-a-file-in-python/

tab5 = sns.countplot(x = anime['sznOfRelease'], hue=anime['ongoing']);

result_tab5 = tab5.get_figure() # сохраняет график

result_tab5.savefig('table_5.png') # сохраняет график по имени и по расширению

"""задание 6"""

anime.isnull().sum() #опредеяет если null  ячейке, вычисляет кол-во null в столбце

# пропуски в mediaType, eps, duration, startYr, finishYr, sznOfRelease, description, watched, rating, votes
incomplete_columns = ['mediaType', 'eps', 'duration', 'startYr', 'finishYr', 
                      'sznOfRelease', 'description', 'watched', 'rating', 'votes']
print(st.mode(np.array(anime[incomplete_columns[0]]))[0])

for i in incomplete_columns:
  val_1 = anime[i] # таблица из индексов и значений
  val_2 = np.array(anime[i]) #массив значений этого столбца
  value = st.mode(val_2)[0][0]
  val_2 = np.where(val_1.isnull(), value, val_1) # isnull() - находит пустое значение,
  anime[i] = val_2

  #if type(...) == int:


#anime

anime.isnull().sum()

"""задание 7"""

#https://translated.turbopages.org/proxy_u/en-ru.ru.a4bf03bf-63cda15b-ca0dc470-74722d776562/https/www.geeksforgeeks.org/ml-one-hot-encoding-of-datasets-in-python/
a1 = np.array(anime.loc[1 : 200, 'rating'])

p_value = st.normaltest(a1)[1] # Проверка, отличается ли выборка от нормального распределения.
alpha = 1e-3
print(f"p = {p_value}")

print("Нормальное распределение") if p_value < alpha else print("Не нормально распределение")

"""задание 8"""

#https://dfedorov.spb.ru/pandas/%D0%A0%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE%20%D0%BF%D0%BE%20%D0%BA%D0%BE%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E%20%D0%BA%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D1%85%20%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20Python.html?ysclid=ld8cthags539837538
One_Hot_Encoding = pd.get_dummies(anime, columns = ['mediaType',"sznOfRelease"]) #столбец с категориями -> категории столбцы -> 1 если есть в столбце с категориями, иначе 0
One_Hot_Encoding

"""задание 9"""

anime.to_csv('result_anime.csv') # сохраняем данные в csv файл

#anime.reset_index(drop=True, inplace=True)
from google.colab import drive
drive.mount('/content/drive')

'''
raiting1 = np.array(anime['rating'])
strength = np.array(NaN if math.isnan(raiting1[i]) else int(raiting1[i]) for i in range(len(anime)))

kolvo = [f"P{i}" for i in range(len(anime))]
plt.bar(kolvo, raiting1)


import math
import numpy as np
from numpy import NaN



strength = np.array(anime['rating'])
kolvo = [f'{i}' for i in range(strength.max()+1)]
strength_bar = [np.count_nonzero(strength == i) for i in range(len(kolvo))]
plt.bar(kolvo, strength_bar, color='red')
'''